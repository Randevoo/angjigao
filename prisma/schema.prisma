// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-js"
  experimentalFeatures = ["aggregateApi"]
}

generator typegraphql {
  provider = "node node_modules/typegraphql-prisma/generator.js"
  output   = "../prisma/generated/type-graphql"
}

enum PaymentStatus {
  UNPAID
  AWAITING_CATURE
  PAID
  REFUNDED
}

model User {
  id             String   @default(uuid()) @id
  email          String   @unique
  username       String   @unique
  password       String
  dob            DateTime
  cart           Cart
  stripe_cust_id String   @default("")
  @@map("UserTable")
}

model Shop {
  id        String     @default(uuid()) @id
  email     String     @unique
  username  String     @unique
  password  String
  shopItems ShopItem[]
}

model ShopItem {
  id             String          @default(uuid()) @id
  createdAt      DateTime        @default(now())
  name           String
  description    String
  price          Float
  imageUrl       String
  shop           Shop            @relation(fields: [shopId], references: [id])
  shopId         String
  cartItemCounts CartItemCount[]
}

model MultiCart {
  id               String            @default(uuid()) @id
  carts            Cart[]
  paymentIntentId  String?
  PaymentMultiCart PaymentMultiCart?
}

model Cart {
  id              String          @default(uuid()) @id
  ownerId         String
  owner           User            @relation(fields: [ownerId], references: [id])
  paymentIntentId String?
  price           Float           @default(0)
  cartItemCounts  CartItemCount[]
  MultiCart       MultiCart?      @relation(fields: [multiCartId], references: [id])
  multiCartId     String?
  PaymentCart     PaymentCart?
}

model CartItemCount {
  id        String    @default(uuid()) @id
  cartId    String
  cart      Cart      @relation(fields: [cartId], references: [id])
  itemId    String
  shopItem  ShopItem  @relation(fields: [itemId], references: [id])
  price     Float
  count     Int
  deletedAt DateTime?
}

model PaymentCart {
  id              String        @default(uuid()) @id
  paymentStatus   PaymentStatus @default(UNPAID)
  cartId          String
  cart            Cart          @relation(fields: [cartId], references: [id])
  paymentIntentId String
}

model PaymentMultiCart {
  id              String        @default(uuid()) @id
  paymentStatus   PaymentStatus @default(UNPAID)
  multiCartId     String
  multiCart       MultiCart     @relation(fields: [multiCartId], references: [id])
  paymentIntentId String
}
