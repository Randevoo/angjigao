// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["aggregateApi"]
}

generator typegraphql {
  provider = "node node_modules/typegraphql-prisma/generator.js"
  output   = "../prisma/generated/type-graphql"
}

enum PaymentStatus {
  UNPAID
  AWAITING_CATURE
  PAID
  REFUNDED
}

model User {
  id               String    @default(uuid()) @id
  email            String    @unique
  username         String    @unique
  password         String
  dob              DateTime
  orders           Order[]
  stripe_cust_id   String    @default("")
  defaultAddressId String?
  addresses        Address[]
  @@map("UserTable")

}

model Address {
  id          String @default(uuid()) @id
  country     String
  city        String
  state       String
  line1       String
  line2       String
  postal_code String
  userId      String
  user        User   @relation(fields: [userId], references: [id])
}

model Shop {
  id        String     @default(uuid()) @id
  email     String     @unique
  username  String     @unique
  password  String
  shopItems ShopItem[]
}

model ShopItem {
  id             String          @default(uuid()) @id
  createdAt      DateTime        @default(now())
  name           String
  description    String
  price          Float
  imageUrl       String
  shop           Shop            @relation(fields: [shopId], references: [id])
  shopId         String
  cartItemCounts CartItemCount[]
  refunds        Refund[]
}

model MultiOrder {
  id                String             @default(uuid()) @id
  orders            Order[]
  paymentIntentId   String?
  PaymentMultiOrder PaymentMultiOrder?
}

model Order {
  id              String        @default(uuid()) @id
  ownerId         String
  owner           User          @relation(fields: [ownerId], references: [id])
  paymentIntentId String?
  price           Float         @default(0)
  cartItemCount   CartItemCount
  MultiOrder      MultiOrder?   @relation(fields: [multiOrderId], references: [id])
  multiOrderId    String?
  PaymentOrder    PaymentOrder?
  deletedAt       DateTime?
}

model CartItemCount {
  id        String    @default(uuid()) @id
  orderId   String
  order     Order     @relation(fields: [orderId], references: [id])
  itemId    String
  shopItem  ShopItem  @relation(fields: [itemId], references: [id])
  price     Float
  count     Int
  deletedAt DateTime?
}

model PaymentOrder {
  id              String        @default(uuid()) @id
  paymentStatus   PaymentStatus @default(UNPAID)
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  paymentIntentId String
}

model PaymentMultiOrder {
  id              String        @default(uuid()) @id
  paymentStatus   PaymentStatus @default(UNPAID)
  multiOrderId    String
  multiOrder      MultiOrder    @relation(fields: [multiOrderId], references: [id])
  paymentIntentId String
}

model Refund {
  id              String   @default(uuid()) @id
  shopItem        ShopItem @relation(fields: [shopItemId], references: [id])
  shopItemId      String
  description     String
  paymentIntentId String
  stripeRefundId  String
}
