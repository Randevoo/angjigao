# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddToCartInput {
  item_id: String!
  buyer_id: String!
}

type Cart {
  id: String!
  ownerId: String!
  paymentIntentId: String
  price: Float!
  multiCartId: String
  paymentStatus: PaymentStatus!
  owner: User!
  cartItemCounts(where: CartItemCountWhereInput, orderBy: CartItemCountOrderByInput, cursor: CartItemCountWhereUniqueInput, take: Int, skip: Int): [CartItemCount!]
  MultiCart: MultiCart
}

input CartCreateOneWithoutCartItemCountsInput {
  create: CartCreateWithoutCartItemCountsInput
  connect: CartWhereUniqueInput
}

input CartCreateWithoutCartItemCountsInput {
  id: String
  paymentIntentId: String
  price: Float
  paymentStatus: PaymentStatus
  owner: UserCreateOneWithoutCartInput!
  MultiCart: MultiCartCreateOneWithoutCartsInput
}

input CartFilter {
  every: CartWhereInput
  some: CartWhereInput
  none: CartWhereInput
}

type CartItemCount {
  id: String!
  cartId: String!
  itemId: String!
  price: Float!
  count: Int!
  deletedAt: DateTime
  shopItem: ShopItem!
}

input CartItemCountCreateManyWithoutShopItemInput {
  create: [CartItemCountCreateWithoutShopItemInput!]
  connect: [CartItemCountWhereUniqueInput!]
}

input CartItemCountCreateWithoutShopItemInput {
  id: String
  price: Float!
  count: Int!
  deletedAt: DateTime
  cart: CartCreateOneWithoutCartItemCountsInput!
}

input CartItemCountFilter {
  every: CartItemCountWhereInput
  some: CartItemCountWhereInput
  none: CartItemCountWhereInput
}

input CartItemCountOrderByInput {
  id: OrderByArg
  cartId: OrderByArg
  itemId: OrderByArg
  price: OrderByArg
  count: OrderByArg
  deletedAt: OrderByArg
}

input CartItemCountWhereInput {
  id: UUIDFilter
  cartId: StringFilter
  itemId: StringFilter
  price: FloatFilter
  count: IntFilter
  deletedAt: NullableDateTimeFilter
  AND: [CartItemCountWhereInput!]
  OR: [CartItemCountWhereInput!]
  NOT: [CartItemCountWhereInput!]
  cart: CartWhereInput
  shopItem: ShopItemWhereInput
}

input CartItemCountWhereUniqueInput {
  id: String
}

input CartOrderByInput {
  id: OrderByArg
  ownerId: OrderByArg
  paymentIntentId: OrderByArg
  price: OrderByArg
  multiCartId: OrderByArg
  paymentStatus: OrderByArg
}

input CartWhereInput {
  id: UUIDFilter
  ownerId: StringFilter
  paymentIntentId: NullableStringFilter
  price: FloatFilter
  cartItemCounts: CartItemCountFilter
  multiCartId: NullableStringFilter
  paymentStatus: PaymentStatusFilter
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  owner: UserWhereInput
  MultiCart: MultiCartWhereInput
}

input CartWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input FindMultiCartByUserIdInput {
  user_id: String!
}

input FloatFilter {
  equals: Float
  not: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type MultiCart {
  id: String!
  paymentIntentId: String
  paymentStatus: PaymentStatus!
  carts(where: CartWhereInput, orderBy: CartOrderByInput, cursor: CartWhereUniqueInput, take: Int, skip: Int): [Cart!]
}

input MultiCartCreateOneWithoutCartsInput {
  create: MultiCartCreateWithoutCartsInput
  connect: MultiCartWhereUniqueInput
}

input MultiCartCreateWithoutCartsInput {
  id: String
  paymentIntentId: String
  paymentStatus: PaymentStatus
}

input MultiCartWhereInput {
  id: UUIDFilter
  carts: CartFilter
  paymentIntentId: NullableStringFilter
  paymentStatus: PaymentStatusFilter
  AND: [MultiCartWhereInput!]
  OR: [MultiCartWhereInput!]
  NOT: [MultiCartWhereInput!]
}

input MultiCartWhereUniqueInput {
  id: String
}

type Mutation {
  createShop(data: ShopCreateInput!): Shop!
  createShopItem(data: ShopItemCreateInput!): ShopItem!
  payCurrentCart(payCurrentCartInput: PayCurrentCartInput!): Cart!
  removeFromCart(removeFromCartInput: RemoveFromCartInput!): Cart!
  addToCart(addToCartInput: AddToCartInput!): Cart!
  signUp(signUpInput: SignUpInput!): User!
}

input NullableDateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

enum OrderByArg {
  asc
  desc
}

input PayCurrentCartInput {
  user_id: String!
  cart_id: String!
  payment_method_id: String!
}

enum PaymentStatus {
  UNPAID
  AWAITING_CATURE
  PAID
  REFUNDED
}

input PaymentStatusFilter {
  equals: PaymentStatus
  not: PaymentStatus
  in: [PaymentStatus!]
  notIn: [PaymentStatus!]
}

type Query {
  shopItem(where: ShopItemWhereUniqueInput!): ShopItem
  shopItems(where: ShopItemWhereInput, orderBy: ShopItemOrderByInput, cursor: ShopItemWhereUniqueInput, take: Int, skip: Int): [ShopItem!]!
  user(where: UserWhereUniqueInput!): User
  findMultiCartsByUserId(findMultiCartByUserIdInput: FindMultiCartByUserIdInput!): MultiCart!
  findCartFromOwnerId(ownerId: String!): Cart!
  findUserById(id: String!): User!
}

input RemoveFromCartInput {
  item_id: String!
  buyer_id: String!
}

type Shop {
  id: String!
  email: String!
  username: String!
  password: String!
}

input ShopCreateInput {
  id: String
  email: String!
  username: String!
  password: String!
  shopItems: ShopItemCreateManyWithoutShopInput
}

input ShopCreateOneWithoutShopItemsInput {
  create: ShopCreateWithoutShopItemsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutShopItemsInput {
  id: String
  email: String!
  username: String!
  password: String!
}

type ShopItem {
  id: String!
  createdAt: DateTime!
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  shopId: String!
  shop: Shop!
  cartItemCounts(where: CartItemCountWhereInput, orderBy: CartItemCountOrderByInput, cursor: CartItemCountWhereUniqueInput, take: Int, skip: Int): [CartItemCount!]
}

input ShopItemCreateInput {
  id: String
  createdAt: DateTime
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  shop: ShopCreateOneWithoutShopItemsInput!
  cartItemCounts: CartItemCountCreateManyWithoutShopItemInput
}

input ShopItemCreateManyWithoutShopInput {
  create: [ShopItemCreateWithoutShopInput!]
  connect: [ShopItemWhereUniqueInput!]
}

input ShopItemCreateWithoutShopInput {
  id: String
  createdAt: DateTime
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  cartItemCounts: CartItemCountCreateManyWithoutShopItemInput
}

input ShopItemFilter {
  every: ShopItemWhereInput
  some: ShopItemWhereInput
  none: ShopItemWhereInput
}

input ShopItemOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  name: OrderByArg
  description: OrderByArg
  price: OrderByArg
  imageUrl: OrderByArg
  shopId: OrderByArg
}

input ShopItemWhereInput {
  id: UUIDFilter
  createdAt: DateTimeFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  imageUrl: StringFilter
  shopId: StringFilter
  cartItemCounts: CartItemCountFilter
  AND: [ShopItemWhereInput!]
  OR: [ShopItemWhereInput!]
  NOT: [ShopItemWhereInput!]
  shop: ShopWhereInput
}

input ShopItemWhereUniqueInput {
  id: String
}

input ShopWhereInput {
  id: UUIDFilter
  email: StringFilter
  username: StringFilter
  password: StringFilter
  shopItems: ShopItemFilter
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
}

input ShopWhereUniqueInput {
  id: String
  email: String
  username: String
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  displayName: String!
  firstName: String!
  lastName: String!
  dob: DateTime!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

type User {
  id: String!
  email: String!
  username: String!
  password: String!
  dob: DateTime!
  stripe_cust_id: String!
  cart: Cart!
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCartInput {
  id: String
  email: String!
  username: String!
  password: String!
  dob: DateTime!
  stripe_cust_id: String
}

input UserWhereInput {
  id: UUIDFilter
  email: StringFilter
  username: StringFilter
  password: StringFilter
  dob: DateTimeFilter
  stripe_cust_id: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  cart: CartWhereInput
}

input UserWhereUniqueInput {
  id: String
  email: String
  username: String
}

input UUIDFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}
