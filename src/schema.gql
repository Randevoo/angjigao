# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddToCartInput {
  item_id: String!
  buyer_id: String!
}

type Cart {
  id: String!
  ownerId: String!
  paymentIntentId: String
  price: Float!
  multiCartId: String
  owner: User!
  cartItemCounts(where: CartItemCountWhereInput, orderBy: [CartItemCountOrderByInput!], cursor: CartItemCountWhereUniqueInput, take: Int, skip: Int, distinct: [CartItemCountDistinctFieldEnum!]): [CartItemCount!]
  MultiCart: MultiCart
  PaymentCart: PaymentCart
}

input CartCreateOneWithoutCartItemCountsInput {
  create: CartCreateWithoutCartItemCountsInput
  connect: CartWhereUniqueInput
}

input CartCreateWithoutCartItemCountsInput {
  id: String
  paymentIntentId: String
  price: Float
  owner: UserCreateOneWithoutCartInput!
  MultiCart: MultiCartCreateOneWithoutCartsInput
  PaymentCart: PaymentCartCreateOneWithoutCartInput
}

enum CartDistinctFieldEnum {
  id
  ownerId
  paymentIntentId
  price
  multiCartId
}

type CartItemCount {
  id: String!
  cartId: String!
  itemId: String!
  price: Float!
  count: Int!
  deletedAt: DateTime
  shopItem: ShopItem!
}

input CartItemCountCreateManyWithoutShopItemInput {
  create: [CartItemCountCreateWithoutShopItemInput!]
  connect: [CartItemCountWhereUniqueInput!]
}

input CartItemCountCreateWithoutShopItemInput {
  id: String
  price: Float!
  count: Int!
  deletedAt: DateTime
  cart: CartCreateOneWithoutCartItemCountsInput!
}

enum CartItemCountDistinctFieldEnum {
  id
  cartId
  itemId
  price
  count
  deletedAt
}

input CartItemCountListRelationFilter {
  every: CartItemCountWhereInput
  some: CartItemCountWhereInput
  none: CartItemCountWhereInput
}

input CartItemCountOrderByInput {
  id: SortOrder
  cartId: SortOrder
  itemId: SortOrder
  price: SortOrder
  count: SortOrder
  deletedAt: SortOrder
}

input CartItemCountWhereInput {
  AND: [CartItemCountWhereInput!]
  OR: [CartItemCountWhereInput!]
  NOT: [CartItemCountWhereInput!]
  id: StringFilter
  cartId: StringFilter
  cart: CartWhereInput
  itemId: StringFilter
  shopItem: ShopItemWhereInput
  price: FloatFilter
  count: IntFilter
  deletedAt: DateTimeNullableFilter
}

input CartItemCountWhereUniqueInput {
  id: String
}

input CartListRelationFilter {
  every: CartWhereInput
  some: CartWhereInput
  none: CartWhereInput
}

input CartOrderByInput {
  id: SortOrder
  ownerId: SortOrder
  paymentIntentId: SortOrder
  price: SortOrder
  multiCartId: SortOrder
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: StringFilter
  ownerId: StringFilter
  owner: UserWhereInput
  paymentIntentId: StringNullableFilter
  price: FloatFilter
  cartItemCounts: CartItemCountListRelationFilter
  MultiCart: MultiCartWhereInput
  multiCartId: StringNullableFilter
  PaymentCart: PaymentCartWhereInput
}

input CartWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumPaymentStatusFilter {
  equals: PaymentStatus
  in: [PaymentStatus!]
  notIn: [PaymentStatus!]
  not: NestedEnumPaymentStatusFilter
}

input FindMultiCartByUserIdInput {
  user_id: String!
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

type MultiCart {
  id: String!
  paymentIntentId: String
  carts(where: CartWhereInput, orderBy: [CartOrderByInput!], cursor: CartWhereUniqueInput, take: Int, skip: Int, distinct: [CartDistinctFieldEnum!]): [Cart!]
  PaymentMultiCart: PaymentMultiCart
}

input MultiCartCreateOneWithoutCartsInput {
  create: MultiCartCreateWithoutCartsInput
  connect: MultiCartWhereUniqueInput
}

input MultiCartCreateWithoutCartsInput {
  id: String
  paymentIntentId: String
  PaymentMultiCart: PaymentMultiCartCreateOneWithoutMultiCartInput
}

input MultiCartWhereInput {
  AND: [MultiCartWhereInput!]
  OR: [MultiCartWhereInput!]
  NOT: [MultiCartWhereInput!]
  id: StringFilter
  carts: CartListRelationFilter
  paymentIntentId: StringNullableFilter
  PaymentMultiCart: PaymentMultiCartWhereInput
}

input MultiCartWhereUniqueInput {
  id: String
}

type Mutation {
  signUp(signUpInput: SignUpInput!): User!
  payCurrentCart(payCurrentCartInput: PayCurrentCartInput!): Cart!
  removeFromCart(removeFromCartInput: RemoveFromCartInput!): Cart!
  addToCart(addToCartInput: AddToCartInput!): Cart!
  createShop(data: ShopCreateInput!): Shop!
  createShopItem(data: ShopItemCreateInput!): ShopItem!
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedEnumPaymentStatusFilter {
  equals: PaymentStatus
  in: [PaymentStatus!]
  notIn: [PaymentStatus!]
  not: NestedEnumPaymentStatusFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PayCurrentCartInput {
  user_id: String!
  cart_id: String!
  payment_method_id: String!
}

type PaymentCart {
  id: String!
  paymentStatus: PaymentStatus!
  cartId: String!
  paymentIntentId: String!
}

input PaymentCartCreateOneWithoutCartInput {
  create: PaymentCartCreateWithoutCartInput
  connect: PaymentCartWhereUniqueInput
}

input PaymentCartCreateWithoutCartInput {
  id: String
  paymentStatus: PaymentStatus
  paymentIntentId: String!
}

input PaymentCartWhereInput {
  AND: [PaymentCartWhereInput!]
  OR: [PaymentCartWhereInput!]
  NOT: [PaymentCartWhereInput!]
  id: StringFilter
  paymentStatus: EnumPaymentStatusFilter
  cartId: StringFilter
  cart: CartWhereInput
  paymentIntentId: StringFilter
}

input PaymentCartWhereUniqueInput {
  id: String
}

type PaymentMultiCart {
  id: String!
  paymentStatus: PaymentStatus!
  multiCartId: String!
  paymentIntentId: String!
}

input PaymentMultiCartCreateOneWithoutMultiCartInput {
  create: PaymentMultiCartCreateWithoutMultiCartInput
  connect: PaymentMultiCartWhereUniqueInput
}

input PaymentMultiCartCreateWithoutMultiCartInput {
  id: String
  paymentStatus: PaymentStatus
  paymentIntentId: String!
}

input PaymentMultiCartWhereInput {
  AND: [PaymentMultiCartWhereInput!]
  OR: [PaymentMultiCartWhereInput!]
  NOT: [PaymentMultiCartWhereInput!]
  id: StringFilter
  paymentStatus: EnumPaymentStatusFilter
  multiCartId: StringFilter
  multiCart: MultiCartWhereInput
  paymentIntentId: StringFilter
}

input PaymentMultiCartWhereUniqueInput {
  id: String
}

enum PaymentStatus {
  UNPAID
  AWAITING_CATURE
  PAID
  REFUNDED
}

type Query {
  findUserById(id: String!): User!
  findMultiCartsByUserId(findMultiCartByUserIdInput: FindMultiCartByUserIdInput!): MultiCart!
  findCartFromOwnerId(ownerId: String!): Cart!
  shopItem(where: ShopItemWhereUniqueInput!): ShopItem
  shopItems(where: ShopItemWhereInput, orderBy: [ShopItemOrderByInput!], cursor: ShopItemWhereUniqueInput, take: Int, skip: Int, distinct: [ShopItemDistinctFieldEnum!]): [ShopItem!]!
  user(where: UserWhereUniqueInput!): User
}

type Refund {
  id: String!
  shopItemId: String!
  description: String!
  paymentIntentId: String!
  stripeRefundId: String!
}

input RefundCreateManyWithoutShopItemInput {
  create: [RefundCreateWithoutShopItemInput!]
  connect: [RefundWhereUniqueInput!]
}

input RefundCreateWithoutShopItemInput {
  id: String
  description: String!
  paymentIntentId: String!
  stripeRefundId: String!
}

enum RefundDistinctFieldEnum {
  id
  shopItemId
  description
  paymentIntentId
  stripeRefundId
}

input RefundListRelationFilter {
  every: RefundWhereInput
  some: RefundWhereInput
  none: RefundWhereInput
}

input RefundOrderByInput {
  id: SortOrder
  shopItemId: SortOrder
  description: SortOrder
  paymentIntentId: SortOrder
  stripeRefundId: SortOrder
}

input RefundWhereInput {
  AND: [RefundWhereInput!]
  OR: [RefundWhereInput!]
  NOT: [RefundWhereInput!]
  id: StringFilter
  shopItem: ShopItemWhereInput
  shopItemId: StringFilter
  description: StringFilter
  paymentIntentId: StringFilter
  stripeRefundId: StringFilter
}

input RefundWhereUniqueInput {
  id: String
}

input RemoveFromCartInput {
  item_id: String!
  buyer_id: String!
}

type Shop {
  id: String!
  email: String!
  username: String!
  password: String!
}

input ShopCreateInput {
  id: String
  email: String!
  username: String!
  password: String!
  shopItems: ShopItemCreateManyWithoutShopInput
}

input ShopCreateOneWithoutShopItemsInput {
  create: ShopCreateWithoutShopItemsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutShopItemsInput {
  id: String
  email: String!
  username: String!
  password: String!
}

type ShopItem {
  id: String!
  createdAt: DateTime!
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  shopId: String!
  shop: Shop!
  cartItemCounts(where: CartItemCountWhereInput, orderBy: [CartItemCountOrderByInput!], cursor: CartItemCountWhereUniqueInput, take: Int, skip: Int, distinct: [CartItemCountDistinctFieldEnum!]): [CartItemCount!]
  refunds(where: RefundWhereInput, orderBy: [RefundOrderByInput!], cursor: RefundWhereUniqueInput, take: Int, skip: Int, distinct: [RefundDistinctFieldEnum!]): [Refund!]
}

input ShopItemCreateInput {
  id: String
  createdAt: DateTime
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  shop: ShopCreateOneWithoutShopItemsInput!
  cartItemCounts: CartItemCountCreateManyWithoutShopItemInput
  refunds: RefundCreateManyWithoutShopItemInput
}

input ShopItemCreateManyWithoutShopInput {
  create: [ShopItemCreateWithoutShopInput!]
  connect: [ShopItemWhereUniqueInput!]
}

input ShopItemCreateWithoutShopInput {
  id: String
  createdAt: DateTime
  name: String!
  description: String!
  price: Float!
  imageUrl: String!
  cartItemCounts: CartItemCountCreateManyWithoutShopItemInput
  refunds: RefundCreateManyWithoutShopItemInput
}

enum ShopItemDistinctFieldEnum {
  id
  createdAt
  name
  description
  price
  imageUrl
  shopId
}

input ShopItemListRelationFilter {
  every: ShopItemWhereInput
  some: ShopItemWhereInput
  none: ShopItemWhereInput
}

input ShopItemOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  name: SortOrder
  description: SortOrder
  price: SortOrder
  imageUrl: SortOrder
  shopId: SortOrder
}

input ShopItemWhereInput {
  AND: [ShopItemWhereInput!]
  OR: [ShopItemWhereInput!]
  NOT: [ShopItemWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  imageUrl: StringFilter
  shop: ShopWhereInput
  shopId: StringFilter
  cartItemCounts: CartItemCountListRelationFilter
  refunds: RefundListRelationFilter
}

input ShopItemWhereUniqueInput {
  id: String
}

input ShopWhereInput {
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
  id: StringFilter
  email: StringFilter
  username: StringFilter
  password: StringFilter
  shopItems: ShopItemListRelationFilter
}

input ShopWhereUniqueInput {
  id: String
  email: String
  username: String
}

input SignUpInput {
  email: String!
  password: String!
  displayName: String!
  firstName: String!
  lastName: String!
  dob: DateTime!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

type User {
  id: String!
  email: String!
  username: String!
  password: String!
  dob: DateTime!
  stripe_cust_id: String!
  cart: Cart!
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCartInput {
  id: String
  email: String!
  username: String!
  password: String!
  dob: DateTime!
  stripe_cust_id: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  username: StringFilter
  password: StringFilter
  dob: DateTimeFilter
  cart: CartWhereInput
  stripe_cust_id: StringFilter
}

input UserWhereUniqueInput {
  id: String
  email: String
  username: String
}
